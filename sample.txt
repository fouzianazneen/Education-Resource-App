

// router.post('/login', async (req, res) => {
//   try {
//     const { email, password, role } = req.body;
//     let user;

//     if (role === 'educator') {
//       user = await Educator.findOne({ email });
//       if (!user || !(await user.comparePassword(password))) {
//         throw new Error('Invalid login credentials');
//       }
//       const token = jwt.sign({ id: user._id, role: 'educator' }, 'secret', { expiresIn: '1h' });
//       res.cookie('token', token, { httpOnly: true });
//       res.redirect('/educator/profile');
//     } else if (role === 'student') {
//       user = await Student.findOne({ email });
//       if (!user || !(await user.comparePassword(password))) {
//         throw new Error('Invalid login credentials');
//       }
//       const token = jwt.sign({ id: user._id, role: 'student' }, 'secret', { expiresIn: '1h' });
//       res.cookie('token', token, { httpOnly: true });
//       res.redirect('/student/profile');
//     } else {
//       throw new Error('Invalid role');
//     }
//   } catch (error) {
//     res.status(400).send(error.message);
//   }
// });

// router.post('/login', async (req, res) => {
//   try {
//     const { email, password, role } = req.body;
//     let user;
//     if (role.toLowerCase() === 'student') {
//     // if (role === 'student') {
//       user = await Student.findOne({ email });
//       if (!user || !(await user.comparePassword(password))) {
//         throw new Error('Invalid login credentials');
//       }
//       const token = jwt.sign({ id: user._id, role: 'student' }, 'secret', { expiresIn: '1h' });
//       res.cookie('token', token, { httpOnly: true });
//       res.redirect('/student/profile');
//     } else {
//       throw new Error('Invalid role or user does not exist');
//     }
//   } catch (error) {
//     res.status(400).send(error.message);
//   }
// });


// router.post('/login/educator', async (req, res) => {
//   try {
//     const { email, password } = req.body;
//     const educator = await Educator.findOne({ email });
//     if (!educator || !(await educator.comparePassword(password))) {
//       throw new Error('Invalid login credentials');
//     }
//     const token = jwt.sign({ id: educator._id, role: 'educator' }, 'secret', { expiresIn: '1h' });
//     res.cookie('token', token, { httpOnly: true });
//     res.redirect('/educator/profile');
//   } catch (error) {
//     res.status(400).send(error.message);
//   }
// });

// router.post('/login/student', async (req, res) => {
//   try {
//     const { email, password } = req.body;
//     const student = await Student.findOne({ email });
//     if (!student || !(await student.comparePassword(password))) {
//       throw new Error('Invalid login credentials');
//     }
//     const token = jwt.sign({ id: student._id, role: 'student' }, 'secret', { expiresIn: '1h' });
//     res.cookie('token', token, { httpOnly: true });
//     res.redirect('/student/profile');
//   } catch (error) {
//     res.status(400).send(error.message);
//   }
// });


// // Login route for educators
// router.post('/login/educator', async (req, res) => {
//   try {
//     const { email, password } = req.body;
//     const educator = await Educator.findOne({ email });
//     if (!educator || !(await educator.comparePassword(password))) {
//       throw new Error('Invalid login credentials');
//     }
//     const token = jwt.sign({ id: educator._id, role: 'educator' }, 'secret', { expiresIn: '1h' });
//     res.cookie('token', token, { httpOnly: true });
//     res.redirect('/educator/profile');
//   } catch (error) {
//     res.status(400).send(error.message);
//   }
// });

// // Login route for students
// router.post('/login/student', async (req, res) => {
//   try {
//     const { email, password } = req.body;
//     const student = await Student.findOne({ email });
//     if (!student || !(await student.comparePassword(password))) {
//       throw new Error('Invalid login credentials');
//     }
//     const token = jwt.sign({ id: student._id, role: 'student' }, 'secret', { expiresIn: '1h' });
//     res.cookie('token', token, { httpOnly: true });
//     res.redirect('/student/profile');
//   } catch (error) {
//     res.status(400).send(error.message);
//   }
// });


// router.post('/login', async (req, res) => {
//   try {
//     const { email, password, role } = req.body;

//     // Check if the provided role is 'educator' or 'student'
//     if (role && ['educator', 'student'].includes(role.toLowerCase())) {
//       let user;
//       if (role.toLowerCase() === 'educator') {
//         // Find educator by email in the Educator collection
//         user = await Educator.findOne({ email });
//       } else {
//         // Find student by email in the Student collection
//         user = await Student.findOne({ email });
//       }

//       // If user is found and password is correct
//       if (user && (await user.comparePassword(password))) {
//         // Generate JWT token with user's id and role
//         const token = jwt.sign({ id: user._id, role: role.toLowerCase() }, 'secret', { expiresIn: '1h' });
//         // Set token in cookie and redirect to respective profile page
//         res.cookie('token', token, { httpOnly: true });
//         if (role.toLowerCase() === 'educator') {
//           res.redirect('/educator/profile');
//         } else {
//           res.redirect('/student/profile');
//         }
//       } else {
//         // Invalid credentials
//         throw new Error('Invalid email or password');
//       }
//     } else {
//       // Invalid role
//       throw new Error('Invalid role');
//     }
//   } catch (error) {
//     // Send error response
//     res.status(400).send(error.message);
//   }
// });



// router.post('/login', async (req, res) => {
//   try {
//     const { email, password, role } = req.body;

//     // Ensure the role is provided and is either 'educator' or 'student'
//     if (!role || (role.toLowerCase() !== 'educator' && role.toLowerCase() !== 'student')) {
//       throw new Error('Invalid role');
//     }

//     // Find the user based on the role
//     let user;
//     if (role.toLowerCase() === 'educator') {
//       user = await Educator.findOne({ email });
//     } else {
//       user = await Student.findOne({ email });
//     }

//     // If user not found or password incorrect, throw error
//     if (!user || !(await user.comparePassword(password))) {
//       throw new Error('Invalid email or password');
//     }

//     // Generate JWT token with user's id and role
//     const token = jwt.sign({ id: user._id, role: role.toLowerCase() }, 'secret', { expiresIn: '1h' });

//     // Set token in cookie and redirect to respective profile page
//     res.cookie('token', token, { httpOnly: true });
//     if (role.toLowerCase() === 'educator') {
//       res.redirect('/educator/profile');
//     } else {
//       res.redirect('/student/profile');
//     }
//   } catch (error) {
//     // Send error response
//     res.status(400).send(error.message);
//   }
// });


// router.post('/login', async (req, res) => {
//   try {
//     const { email, password, role } = req.body;

//     // Ensure the role is provided and is either 'educator' or 'student'
//     if (!role || !['educator', 'student'].includes(role.toLowerCase())) {
//       throw new Error('Invalid role');
//     }

//     // Find the user based on the role
//     const User = role.toLowerCase() === 'educator' ? Educator : Student;
//     const user = await User.findOne({ email });

//     // If user not found or password incorrect, throw error
//     if (!user || !(await user.comparePassword(password))) {
//       throw new Error('Invalid email or password');
//     }

//     // Generate JWT token with user's id and role
//     const token = jwt.sign({ id: user._id, role: role.toLowerCase() }, 'secret', { expiresIn: '1h' });

//     // Set token in cookie and redirect to respective profile page
//     res.cookie('token', token, { httpOnly: true });
//     res.redirect(`/${role.toLowerCase()}/profile`);
//   } catch (error) {
//     // Send error response
//     res.status(400).send(error.message);
//   }
// });












// student.js

// const express = require('express');
// const router = express.Router();
// const { verifyToken } = require('../utils/jwtUtils');

// // Middleware to verify JWT token
// router.use((req, res, next) => {
//   const token = req.cookies.token;
//   if (!token) {
//     return res.status(401).send('Unauthorized: No token provided');
//   }

//   try {
//     const decoded = verifyToken(token);
//     req.user = decoded; // Attach user info to request object
//     next();
//   } catch (error) {
//     res.status(401).send('Unauthorized: Invalid token');
//   }
// });

// // Profile route for student
// router.get('/profile', (req, res) => {
//   // Use req.user to get user info from JWT token
//   const userId = req.user.id;
//   // Fetch student profile data based on userId
//   // Render student profile page
// });

// module.exports = router;

